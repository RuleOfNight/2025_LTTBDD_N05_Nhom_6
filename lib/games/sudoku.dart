import 'package:flutter/material.dart';
import 'package:sudoku_solver_generator/sudoku_solver_generator.dart';

class SudokuGame extends StatefulWidget {
  const SudokuGame({Key? key}) : super(key: key);

  @override
  State<SudokuGame> createState() => _SudokuGameState();
}

class _SudokuGameState extends State<SudokuGame> {
  static const int gridSize = 9;
  List<List<int>> board = []; // board
  List<List<bool>> isFixed =
      []; // ƒê√°nh d·∫•u √¥ g·ªëc (ch·ª©a s·ªë m√† ch∆∞∆°ng tr√¨nh t·∫°o s·∫µn)
  List<List<bool>> isError = []; // √î l·ªói
  List<List<int>> solution = []; // ƒë√°p √°n

  // Menu ch·ªçn ƒë·ªô kh√≥
  bool showDifficultySelector = true;

  // √î ƒëang ƒë∆∞·ª£c ch·ªçn
  int? selectedRow;
  int? selectedCol;

  // T·∫°o b·∫£ng cho t·ª´ng dif
  void _selectDifficulty(String difficulty) {
    int emptyCount = 30; // Default: Easy

    if (difficulty == 'Medium') {
      emptyCount = 45;
    } else if (difficulty == 'Asian') {
      emptyCount = 54;
    }

    setState(() {
      _generateBoard(emptyCount);
      showDifficultySelector = false;
    });
  }

  void _generateBoard(int emptySquares) {
    /// Let me explain
    /// List trong Dart l√† ki·ªÉu tham chi·∫øu (reference type)
    /// V√≠ d·ª• n·∫øu code cho board tham chi·∫øu tr·ª±c ti·∫øp ƒë·∫øn puzzle th√¨ khi thay ƒë·ªïi board th√¨ puzzle c≈©ng b·ªã thay ƒë·ªïi theo
    /// Do ƒë√≥ c·∫ßn t·∫°o 1 b·∫£n sao (copy) c·ªßa puzzle ƒë·ªÉ board kh√¥ng b·ªã ·∫£nh h∆∞·ªüng khi thay ƒë·ªïi board
    ///   List<List<int>> puzzle = [[1, 2, 3]];
    ///   List<List<int>> board = puzzle; th√¨ khi ng∆∞·ªùi ch∆°i nh·∫≠p s·ªë v√†o board th√¨ puzzle g·ªëc c≈©ng b·ªã thay ƒë·ªïi theo -> kh√¥ng bao gi·ªù th·∫Øng ƒë∆∞·ª£c
    /// Gi·∫£i ph√°p l√† t·∫°o 1 List m·ªõi cho board v√† copy t·ª´ng ph·∫ßn t·ª≠ t·ª´ puzzle sang

    /// 1. List.generate(gridSize, ...)
    ///   T·∫°o 1 List m·ªõi c√≥ ƒë·ªô d√†i l√† gridSize (9)
    ///   M·ªói ph·∫ßn t·ª≠ c·ªßa List n√†y l√† 1 List<int> m·ªõi ƒë∆∞·ª£c t·∫°o ra b·ªüi h√†m b√™n trong

    /// 2. List<int>.from(puzzle[i])
    ///   T·∫°o 1 List<int> m·ªõi t·ª´ List<int> puzzle[i]
    ///   ƒê·∫£m b·∫£o board[i] l√† 1 List<int> ho√†n to√†n m·ªõi, kh√¥ng tham chi·∫øu ƒë·∫øn puzzle[i]
    ///   v√≠ d·ª•: puzzle[0] = [1, 2, 3];
    ///         List<int>.from(puzzle[0])  // ‚Üí [1, 2, 3], nh∆∞ng l√† list M·ªöI trong v√πng nh·ªõ

    /// 3. List.generate(...)
    ///   ch·∫°y 9 l·∫ßn cho i t·ª´ 0 ƒë·∫øn 8 ƒë·ªÉ t·∫°o 9 List<int> m·ªõi cho board, m·ªói l·∫ßn s·∫Ω t·∫°o 1 list con ri√™ng, sau ƒë√≥ gom t·∫•t c·∫£ v√†o list l·ªõn b√™n ngo√†i
    ///   k·∫øt qu·∫£:
    ///       board = [
    ///         [copy c·ªßa puzzle[0]],
    ///         [copy c·ªßa puzzle[1]],
    ///         [copy c·ªßa puzzle[2]],
    ///         ...
    ///       ]

    /// N√≥i chung l√†:
    /// Layer t·∫ßng n√¥ng (List.generate) t·∫°o khung 9 h√†ng
    /// Layer t·∫ßng s√¢u (List.from) sao ch√©p t·ª´ng h√†ng c·ªßa puzzle ch·ª© kh√¥ng tham chi·∫øu tr·ª±c ti·∫øp t·ªõi puzzle

    // S·ªë √¥ tr·ªëng h·ª£p l·ªá 0 -> 54 (c·∫£ matrix 9x9 c√≥ 81 √¥, ƒë·ªÉ l·∫°i √≠t nh·∫•t 27 √¥ c√≥ s·ªë m·ªõi ƒë·∫£m b·∫£o cho ra nghi·ªám duy nh·∫•t c√≥ th·ªÉ gi·∫£i ƒë∆∞·ª£c)
    final capped = emptySquares.clamp(0, 54);

    // Gen board
    final generator = SudokuGenerator(
      emptySquares: capped,
      uniqueSolution: true,
    );

    final puzzle = generator.newSudoku; // B·∫£ng ch∆°i
    final solved = generator.newSudokuSolved; // B·∫£ng ƒë√°p √°n

    board = List.generate(
      gridSize,
      (i) => List<int>.from(puzzle[i]),
    ); // gi·∫£i th√≠ch ·ªü tr√™n
    solution = List.generate(gridSize, (i) => List<int>.from(solved[i]));

    // ƒê√°nh d·∫•u c√°c √¥ c√≥ s·ªë ban ƒë·∫ßu l√† fixed (kh√¥ng s·ª≠a ƒë∆∞·ª£c)
    // N·∫øu puzzle[i][j] != 0 th√¨ l√† s·ªë ban ƒë·∫ßu
    isFixed = List.generate(
      gridSize,
      (i) => List.generate(gridSize, (j) => puzzle[i][j] != 0),
    );

    // Kh·ªüi t·∫°o m·∫£ng error (ban ƒë·∫ßu kh√¥ng c√≥ l·ªói n√†o)
    isError = List.generate(gridSize, (_) => List.filled(gridSize, false));
  }

  // Reset game v·ªÅ m√†n h√¨nh ch·ªçn ƒë·ªô kh√≥
  void _resetGame() {
    setState(() {
      showDifficultySelector = true;
      selectedRow = null;
      selectedCol = null;
    });
  }

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn s·ªë t·ª´ number pad
  void _onNumberSelect(int num) {
    if (selectedRow == null || selectedCol == null) return;
    if (isFixed[selectedRow!][selectedCol!]) return;

    setState(() {
      board[selectedRow!][selectedCol!] = num;
      _checkErrors();

      if (_checkWin()) {
        _showWin();
      }
    });
  }

  void _checkErrors() {
    // Reset t·∫•t c·∫£ √¥ v·ªÅ kh√¥ng l·ªói
    isError = List.generate(gridSize, (_) => List.filled(gridSize, false));

    // Duy·ªát qua t·ª´ng √¥
    for (int i = 0; i < gridSize; i++) {
      for (int j = 0; j < gridSize; j++) {
        final value = board[i][j];

        // B·ªè qua √¥ tr·ªëng
        if (value == 0) continue;

        // Ki·ªÉm tra tr√πng trong h√†ng
        for (int k = 0; k < gridSize; k++) {
          if (k != j && board[i][k] == value) {
            // ƒê√°nh d·∫•u l·ªói n·∫øu tr√πng s·ªë
            isError[i][j] = true;
            isError[i][k] = true;
          }
        }

        // Ki·ªÉm tra tr√πng trong c·ªôt
        for (int k = 0; k < gridSize; k++) {
          if (k != i && board[k][j] == value) {
            // ƒê√°nh d·∫•u l·ªói n·∫øu tr√πng s·ªë
            isError[i][j] = true;
            isError[k][j] = true;
          }
        }
      }
    }
  }

  void _onCellTap(int row, int col) {
    // Kh√¥ng cho ch·ªçn √¥ ƒë√£ c√≥ gi√° tr·ªã m√† game kh·ªüi t·∫°o
    if (isFixed[row][col]) return;

    setState(() {
      selectedRow = row;
      selectedCol = col;
    });
  }

  bool _checkWin() {
    // Check xem t·∫•t c·∫£ √¥ ƒë√£ ƒëi·ªÅn v√† kh√¥ng c√≥ l·ªói
    for (int i = 0; i < gridSize; i++) {
      for (int j = 0; j < gridSize; j++) {
        if (board[i][j] == 0 || isError[i][j]) {
          return false;
        }
      }
    }
    // Ki·ªÉm tra m·ªói h√†ng c√≥ ƒë·ªß 1-9 kh√¥ng tr√πng
    for (int i = 0; i < gridSize; i++) {
      final seen = <int>{}; // array ƒë·ªÉ l∆∞u s·ªë ƒë√£ th·∫•y
      for (int j = 0; j < gridSize; j++) {
        // N·∫øu s·ªë ƒë√£ t·ªìn t·∫°i trong array -> tr√πng -> √©o win
        if (seen.contains(board[i][j])) {
          return false;
        }
        seen.add(board[i][j]);
      }
    }

    // Ki·ªÉm tra m·ªói c·ªôt c√≥ ƒë·ªß 1-9 kh√¥ng tr√πng
    for (int j = 0; j < gridSize; j++) {
      final seen = <int>{}; // array ƒë·ªÉ l∆∞u s·ªë ƒë√£ th·∫•y
      for (int i = 0; i < gridSize; i++) {
        // N·∫øu s·ªë ƒë√£ t·ªìn t·∫°i trong array -> tr√πng -> √©o win
        if (seen.contains(board[i][j])) {
          return false;
        }
        seen.add(board[i][j]);
      }
    }

    return true;
  }

  void _showWin() {
    showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: const Color(0xFF1A1A2E),
        title: const Text(
          'üéâ Ch√∫c m·ª´ng!',
          style: TextStyle(color: Colors.white),
        ),
        content: const Text(
          'B·ªë m·∫π h·∫≥n ph·∫£i t·ª± h√†o v·ªÅ b·∫°n l·∫Øm ü§è',
          style: TextStyle(color: Colors.white70),
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(ctx).pop(); // ƒê√≥ng log
              setState(
                () => showDifficultySelector = true,
              ); // V·ªÅ m√†n h√¨nh ch·ªçn ƒë·ªô kh√≥
            },
            child: const Text(
              'Ch∆°i M·ªõi',
              style: TextStyle(color: Colors.purpleAccent),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    if (showDifficultySelector) {
      // Menu ch·ªçn ƒë·ªô kh√≥
      return Scaffold(
        appBar: AppBar(title: const Text('Sudoku')),
        backgroundColor: const Color(0xFF0F0F1E),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text(
                'Ch·ªçn ƒë·ªô kh√≥',
                style: TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              const SizedBox(height: 40),
              _buildDifficultyButton('D·ªÖ', Colors.green),
              const SizedBox(height: 16),
              _buildDifficultyButton('Trung b√¨nh', Colors.orange),
              const SizedBox(height: 16),
              _buildDifficultyButton('Asian', Colors.red),
            ],
          ),
        ),
      );
    }

    // M√†n h√¨nh game
    const double cellSize = 35; // size m·ªói √¥

    return Scaffold(
      appBar: AppBar(
        title: const Text('Sudoku 9x9'),
        actions: [
          IconButton(
            // n√∫t reset game
            icon: const Icon(Icons.refresh),
            onPressed: _resetGame,
          ),
        ],
      ),
      backgroundColor: const Color(0xFF0F0F1E),
      body: Center(
        child: SingleChildScrollView(
          // Widget cho ph√©p scroll
          child: Column(
            children: [
              const SizedBox(height: 20),
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: const Color(0xFF1A1A2E),
                  borderRadius: BorderRadius.circular(12),
                ),
                // Th√™m maxWidth ƒë·ªÉ b·∫£ng kh√¥ng b·ªã k√©o qu√° to
                constraints: const BoxConstraints(
                  maxWidth: 500, // ho·∫∑c 400, tu·ª≥ b·∫°n mu·ªën b·∫£ng to c·ª° n√†o
                ),
                child: GridView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 9,
                    childAspectRatio: 1,
                    crossAxisSpacing: 2,
                    mainAxisSpacing: 2,
                  ),
                  itemCount: 81,
                  itemBuilder: (ctx, index) {
                    int row =
                        index ~/
                        9; // X√°c ƒë·ªãnh h√†ng c·ªßa √¥ (chia l·∫•y ph·∫ßn nguy√™n)
                    int col =
                        index % 9; // X√°c ƒë·ªãnh c·ªôt c·ªßa √¥ (chia l·∫•y ph·∫ßn d∆∞)
                    bool selected = selectedRow == row && selectedCol == col;

                    return GestureDetector(
                      onTap: () => _onCellTap(row, col),
                      child: Container(
                        width: cellSize,
                        height: cellSize,
                        decoration: BoxDecoration(
                          // hightlight √¥ ƒë∆∞·ª£c ch·ªçn/l·ªói
                          color: isError[row][col]
                              ? Colors.red.withOpacity(
                                  0.3,
                                ) // ∆Øu ti√™n √¥ l·ªói cao nh·∫•t
                              : (isFixed[row][col]
                                    ? Colors.grey.withOpacity(0.3) // √î g·ªëc
                                    : (selected
                                          ? Colors.purpleAccent.withOpacity(
                                              0.3,
                                            ) // √î ƒë∆∞·ª£c ch·ªçn
                                          : const Color(0xFF0F0F1E))),
                          border: Border.all(
                            color: selected
                                ? Colors.purpleAccent
                                : Colors.grey.withOpacity(0.3),
                            width: selected ? 2 : 1,
                          ),
                        ),

                        child: Center(
                          child: Text(
                            board[row][col] == 0
                                ? ''
                                : board[row][col].toString(),
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: isFixed[row][col]
                                  ? Colors.white
                                  : Colors.purpleAccent,
                            ),
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
              const SizedBox(height: 30),
              const Text(
                'Ch·ªçn s·ªë',
                style: TextStyle(fontSize: 18, color: Colors.white70),
              ),
              const SizedBox(height: 10),
              // Number pad
              Wrap(
                spacing: 8,
                runSpacing: 8,
                alignment: WrapAlignment.center,
                children: List.generate(9, (i) => _buildNumberButton(i + 1)),
              ),
              const SizedBox(height: 10),
              _buildNumberButton(0, label: 'X√≥a'),
              const SizedBox(height: 20),
            ],
          ),
        ),
      ),
    );
  }

  /// Widget menu ch·ªçn ƒë·ªô kh√≥
  Widget _buildDifficultyButton(String difficulty, Color color) {
    return ElevatedButton(
      onPressed: () => _selectDifficulty(difficulty),

      style: ElevatedButton.styleFrom(
        backgroundColor: const Color(0xFF1A1A2E),
        padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 20),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
      child: SizedBox(
        width: 200,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              difficulty,
              style: const TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: color.withOpacity(0.3),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Icon(Icons.grid_4x4, color: color, size: 24),
            ),
          ],
        ),
      ),
    );
  }

  /// Widget numpad
  Widget _buildNumberButton(int num, {String? label}) {
    // label ƒë·ªÉ hi·ªÉn th·ªã ch·ªØ thay v√¨ s·ªë (d√πng cho n√∫t x√≥a)
    return ElevatedButton(
      onPressed: () => _onNumberSelect(num),
      style: ElevatedButton.styleFrom(
        backgroundColor: num == 0
            ? Colors.red.withOpacity(0.3)
            : Colors.purpleAccent,
        padding: const EdgeInsets.all(16),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        minimumSize: const Size(50, 50),
      ),
      child: Text(
        label ?? num.toString(),
        style: const TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.bold,
          color: Colors.white,
        ),
      ),
    );
  }
}
